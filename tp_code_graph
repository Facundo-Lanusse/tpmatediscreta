from implemantations.adj_matrix_weighted import WeightedAdjacencyMatrixGraph
from algorithms.kruskal import kruskal

class ComunicationWeb(WeightedAdjacencyMatrixGraph):
    
#Encuentra enlaces adicionales para redundancia en el grafo que ya tiene un MST.
    def find_redundant_links(graph, mst_edges):

        redundant_edges = []
        mst_set = set(mst_edges)

        # Buscar enlaces no en el MST que puedan añadirse para redundancia
        for u in graph.vertex_list:
            for v, weight in graph.get_adjacency_list(u):
                if (u, v, weight) not in mst_set and (v, u, weight) not in mst_set:
                    redundant_edges.append((u, v, weight))

        return redundant_edges

#Construye la red con redundancia para asegurar rutas alternativas entre algunos nodos.
    def build_redundant_network(self):
        
        # Crear el grafo
        graph = WeightedAdjacencyMatrixGraph()
        
        # Agregar vértices y aristas
        # Aca va el codigo con los datos del grafo 
        graph = WeightedAdjacencyMatrixGraph()

        graph.add_vertex('A')
        graph.add_vertex('B')
        graph.add_vertex('C')
        graph.add_vertex('D')

        graph.add_edge('A', 'B', 1)
        graph.add_edge('A', 'C', 4)
        graph.add_edge('B', 'C', 2)
        graph.add_edge('B', 'D', 5)
        graph.add_edge('C', 'D', 3)

        # Crear MST usando Kruskal
        mst_edges = kruskal.kruskal_algorithm(graph)
        print("MST Edges:", mst_edges)

        # Buscar enlaces adicionales para redundancia
        redundant_edges = ComunicationWeb.find_redundant_links(graph, mst_edges)
        print("Redundant Edges:", redundant_edges)

        # Construir red final combinando MST y enlaces redundantes
        redundant_network = mst_edges + redundant_edges
        return redundant_network

    # Ejecutar la función
    redundant_network = build_redundant_network()
    print("Redundant Network:", redundant_network)

ComunicationWeb.build_redundant_network